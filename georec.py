# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Georec
                                 A QGIS plugin
 Geo recommendation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GiSGeeks
        email                : HanwGeek@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtCore import QThread, QTime, QModelIndex, pyqtSignal, QAbstractTableModel
from PyQt5.QtGui import QIcon, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QAction, QAbstractItemView, QProgressBar, QProgressDialog, QPushButton, QMessageBox
from qgis.core import QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsFeatureRequest, QgsWkbTypes
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .georec_train_dlg import GeorecTrainDlg
from .georec_train_param_dlg import GeorecTrainParamDlg
import xgboost as xgb
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import os.path


class Georec:
  """QGIS Plugin Implementation."""

  def __init__(self, iface):
      """Constructor.

      :param iface: An interface instance that will be passed to this class
          which provides the hook by which you can manipulate the QGIS
          application at run time.
      :type iface: QgsInterface
      """
      # Save reference to the QGIS interface
      self.iface = iface
      # initialize plugin directory
      self.plugin_dir = os.path.dirname(__file__)
      # initialize locale
      locale = QSettings().value('locale/userLocale')[0:2]
      locale_path = os.path.join(
          self.plugin_dir,
          'i18n',
          'Georec_{}.qm'.format(locale))

      if os.path.exists(locale_path):
          self.translator = QTranslator()
          self.translator.load(locale_path)

          if qVersion() > '4.3.3':
              QCoreApplication.installTranslator(self.translator)

      # Declare instance attributes
      self.actions = []
      self.menu = self.tr(u'&Geo Rec')

      # Check if plugin was started the first time in current QGIS session
      # Must be set in initGui() to survive plugin reloads
      self.first_start = None

  # noinspection PyMethodMayBeStatic
  def tr(self, message):
      """Get the translation for a string using Qt translation API.

      We implement this ourselves since we do not inherit QObject.

      :param message: String for translation.
      :type message: str, QString

      :returns: Translated version of message.
      :rtype: QString
      """
      # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
      return QCoreApplication.translate('Georec', message)

  def add_action(
      self,
      icon_path,
      text,
      callback,
      enabled_flag=True,
      add_to_menu=True,
      add_to_toolbar=True,
      status_tip=None,
      whats_this=None,
      parent=None):
      """Add a toolbar icon to the toolbar.

      :param icon_path: Path to the icon for this action. Can be a resource
          path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
      :type icon_path: str

      :param text: Text that should be shown in menu items for this action.
      :type text: str

      :param callback: Function to be called when the action is triggered.
      :type callback: function

      :param enabled_flag: A flag indicating if the action should be enabled
          by default. Defaults to True.
      :type enabled_flag: bool

      :param add_to_menu: Flag indicating whether the action should also
          be added to the menu. Defaults to True.
      :type add_to_menu: bool

      :param add_to_toolbar: Flag indicating whether the action should also
          be added to the toolbar. Defaults to True.
      :type add_to_toolbar: bool

      :param status_tip: Optional text to show in a popup when mouse pointer
          hovers over the action.
      :type status_tip: str

      :param parent: Parent widget for the new action. Defaults None.
      :type parent: QWidget

      :param whats_this: Optional text to show in the status bar when the
          mouse pointer hovers over the action.

      :returns: The action that was created. Note that the action is also
          added to self.actions list.
      :rtype: QAction
      """

      icon = QIcon(icon_path)
      action = QAction(icon, text, parent)
      action.triggered.connect(callback)
      action.setEnabled(enabled_flag)

      if status_tip is not None:
          action.setStatusTip(status_tip)

      if whats_this is not None:
          action.setWhatsThis(whats_this)

      if add_to_toolbar:
          # Adds plugin icon to Plugins toolbar
          self.iface.addToolBarIcon(action)

      if add_to_menu:
          self.iface.addPluginToMenu(
              self.menu,
              action)

      self.actions.append(action)

      return action

  def initGui(self):
      """Create the menu entries and toolbar icons inside the QGIS GUI."""

      self.add_action(
        ':/plugins/georec/icon.png',
        text=self.tr(u'vector to raster'),
        callback=self.vector_to_raster,
        parent=self.iface.mainWindow())

      self.add_action(
        ':/plugins/georec/icon.png',
        text=self.tr(u'raster to vector'),
        callback=self.raster_to_vector,
        parent=self.iface.mainWindow())

      self.add_action(
        ':/plugins/georec/icon.png',
        text=self.tr(u'train'),
        callback=self.train,
        parent=self.iface.mainWindow())

      self.add_action(
        ':/plugins/georec/icon.png',
        text=self.tr(u'train'),
        callback=self.test,
        parent=self.iface.mainWindow())

      # will be set False in run()
      self.first_start = True

  def unload(self):
      """Removes the plugin menu item and icon from QGIS GUI."""
      for action in self.actions:
          self.iface.removePluginMenu(
              self.tr(u'&Geo Rec'),
              action)
          self.iface.removeToolBarIcon(action)

  def run(self):
      """Run method that performs all the real work"""

      # Create the dialog with elements (after translation) and keep reference
      # Only create GUI ONCE in callback, so that it will only load when the plugin is started
      if self.first_start == True:
          self.first_start = False
          self.dlg = GeorecDialog()

      # show the dialog
      self.dlg.show()
      # Run the dialog event loop
      result = self.dlg.exec_()
      # See if OK was pressed
      if result:
          # Do something useful here - delete the line containing pass and
          # substitute with your code.
          pass

  def vector_to_raster(self):
    pass

  def raster_to_vector(self):
    pass

  def train(self):
    # Create the dialog with elements (after translation) and keep reference
    # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    if self.first_start == True:
        self.first_start = False
        self.dlg = GeorecTrainDlg()

    # Init params
    self.dlg.layerComboBox.clear()
    self.layers = list(QgsProject.instance().mapLayers().values())
    for layer in self.layers:
      if layer.type() == layer.VectorLayer:
        self.dlg.layerComboBox.addItem(layer.name())

    self.dlg.layerComboBox.currentIndexChanged.connect(self._get_layer_field)
    self._get_layer_field()
    # self.dlg.layerAttrView.setModel(self.model)
    self.featMap = {}

    # show the dialog
    self.dlg.show()
    # Run the dialog event loop
    result = self.dlg.exec_()
  
    if result:
      self.featLayer = self.layers[self.dlg.layerComboBox.currentIndex()]
      self.target = self.dlg.fieldComboBox.currentText()
      self.featField = [f.name() for f in self.featLayer.fields() if f.name() != self.target]
      
      featCount = self.featLayer.featureCount()
      self.train_data = np.zeros([featCount, len(self.featField) + 2])
      self.target_data = np.zeros([featCount, 1])
      self.featIter = self.featLayer.getFeatures()

      self._gen_train_data()
      self.paramDlg = GeorecTrainParamDlg()
      self.paramDlg.show()
      res = self.paramDlg.exec_()
      if res:
        self._train()

  def test(self):
    pass

  def _gen_train_data(self):
    for idx, feat in enumerate(self.featLayer.getFeatures()):
      geom_point = feat.geometry().asPoint()
      self.train_data[idx][0] = geom_point.x()
      self.train_data[idx][1] = geom_point.y()
      for i, attr in enumerate(self.featField):
        if isinstance(feat[attr], str):
          self.train_data[idx][i + 2] = 0
        else:
          self.train_data[idx][i + 2] = feat[attr]
      self.target_data[idx] = feat[self.target]

  def _get_layer_field(self):
    self.dlg.fieldComboBox.clear()
    for field in self.layers[self.dlg.layerComboBox.currentIndex()].fields():
      self.dlg.fieldComboBox.addItem(field.name())

  def _train(self):
    self.xlf = xgb.XGBRegressor(max_depth=14, 
                    learning_rate=0.005, 
                    n_estimators=420, 
                    silent=True, 
                    objective='reg:linear', 
                    nthread=-1, 
                    gamma=0.5,
                    min_child_weight=1.5, 
                    max_delta_step=1, 
                    subsample=0.8, 
                    colsample_bytree=0.7, 
                    colsample_bylevel=1, 
                    reg_alpha=0.5, 
                    reg_lambda=1, 
                    scale_pos_weight=1, 
                    seed=1440, 
                    missing=None)
    self.pBar = WaitProgressDialog()
    cancelButton = QPushButton("Cancel")
    self.pBar.setCancelButton(cancelButton)
    cancelButton.clicked.connect(self.thread.terminate)
    cancelButton.setGeometry(100, 100, 100, 100)
    self.pBar.show() 
    # self.thread.start()
    
    # Start train
    X_train, X_test, y_train, y_test = train_test_split(self.train_data,self.target_data,test_size=0.25, random_state=33)
    bst = self.xlf.fit(X_train, y_train, eval_metric='rmse', verbose=True, eval_set = [(X_test, y_test)], early_stopping_rounds=100)
    self.pBar.close()

    # Validation 
    y_pred = self.xlf.predict(X_test)
    self.accuracy = accuracy_score(y_test, y_pred)

class TrainThread(QThread):
  closeTrigger = pyqtSignal()
  def __init__(self, rec, parent=None):
    super(TrainThread, self).__init__(parent)
    self.rec = rec
    self.closeTrigger.connect(self.rec.pBar.close)

  def __del__(self):
    self.wait()

  def run(self):
    print("----- thread start -----")
    self.rec._train()
    self.closeTrigger.emit()

class WaitProgressDialog(QProgressDialog):
  def __init__(self, parent=None):
    super(WaitProgressDialog, self).__init__(parent)
    self.setMaximum(0)
    self.setMinimum(0)
    self.setWindowTitle("Training... ")
    self.setFixedSize(400, 100)